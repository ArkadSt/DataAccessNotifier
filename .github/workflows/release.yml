name: Build and Release Signed APK

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name for the release'
        required: true
        default: '1.0.0'

jobs:
  build-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Decode keystore
      env:
        ENCODED_KEYSTORE: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $ENCODED_KEYSTORE | base64 -d > app/release-keystore.jks

    - name: Extract version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.event.inputs.version_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Update version in build.gradle.kts
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        # Extract version code (increment based on existing or use timestamp)
        VERSION_CODE=$(date +%s)
        sed -i "s/versionCode = [0-9]*/versionCode = $VERSION_CODE/" app/build.gradle.kts
        sed -i "s/versionName = \".*\"/versionName = \"$VERSION\"/" app/build.gradle.kts

    - name: Build Release APK
      env:
        KEYSTORE_PATH: app/release-keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: ./gradlew assembleRelease

    - name: Sign APK
      env:
        KEYSTORE_PATH: app/release-keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # Verify the APK was signed correctly
        $ANDROID_HOME/build-tools/*/apksigner verify app/build/outputs/apk/release/app-release.apk

    - name: Rename APK
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/DataAccessNotifier-$VERSION.apk

    - name: Upload APK to Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: app/build/outputs/apk/release/DataAccessNotifier-${{ steps.get_version.outputs.version }}.apk
        asset_name: DataAccessNotifier-${{ steps.get_version.outputs.version }}.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload APK as artifact
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: DataAccessNotifier-${{ steps.get_version.outputs.version }}
        path: app/build/outputs/apk/release/DataAccessNotifier-${{ steps.get_version.outputs.version }}.apk
        retention-days: 30

    - name: Clean up keystore
      if: always()
      run: rm -f app/release-keystore.jks
